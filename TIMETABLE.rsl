NET
scheme TIMETABLE = extend NET with
class
  type 
    TimeTable = TramId -m-> Plan, -- time tables
    Entry::
	si: StopId
	at: Time
	dt: Time,
    Plan = (Entry)-list,
    TramId = Text -- tram names

    value /* generators */
      -- the empty timetable
      empty: TimeTable = [],
      emptyPlan: Plan = <..>,
      
      -- add to a time table an empty plan for a new tram
      addTram: TramId >< TimeTable -> TimeTable
      addTram(ti, tt) is tt !! [ti +> emptyPlan],


      -- add a stop with arrival time and departure time to the plan for a given tram
      addStop: TramId >< StopId >< Time >< Time >< TimeTable -> TimeTable
      addStop(ti, si, t1, t2, tt) is tt !! [ti +> tt(ti) ^ <.mk_Entry(si, t1, t2).>]
      pre isIn(ti, tt)

  value /* observers */
     -- check whether a tram with a given name exists in a given time table
     isIn: TramId >< TimeTable -> Bool
     isIn(ti, tt) is ti isin dom(tt),
     
     isIn: StopId >< Plan -> Bool
     isIn(si, p) is
		   if p = emptyPlan then
		      false
		   elsif si = si(hd(p)) then
		      true
		   else
		      isIn(si, tl(p))
		   end
			   
     -- you can add more observers here
     
 
  value /* predicates to check time tables */   
     

     noEntryInPlan: TimeTable >< Net -> Bool
     noEntryInPlan(tt, n) is ~(all p : Plan :- p isin rng(tt) =>
     (exists e : Entry :- e isin p /\ ~(isIn(si(e), n)))),

     correctTimingAtStop: TimeTable >< Net -> Bool
     correctTimingAtStop(tt, n) is (all p : Plan :- p isin rng(tt) =>
			     ~(exists e: Entry :- e isin p /\ dt(e) - at(e) <
			     minWaitingTime(si(e), n))),

     currentState: TramId >< TimeTable >< Time -> StopId >< StopId
     currentState(ti, tt, t) is recCurrentState(tt(ti), si(hd(tt(ti))), t),

     recCurrentState: Plan >< StopId >< Time -> StopId >< StopId
     recCurrentState(p, sio,  t) is 
			  let 
			     e = hd(p)
			  in
			     if t > dt(e) then
				recCurrentState(tl(p), si(e), t)
			     elsif t >= at(e) then
			        (si(e), si(e))
			     else
			        (sio, si(e))
			     end
			  end,
     
     capacityAtStop: TimeTable >< Net -> Bool
     capacityAtStop(tt, n) is
	 (all s : Stop :- s isin stops(n) => ~(exists
	 t : Time :- t isin {0..60} /\ capacity(sId(s), n) < tramsAtStop(tt, t, sId(s), 0))),

     tramsAtStop: TimeTable >< Time >< StopId >< Nat -> Nat
     tramsAtStop(tt, t, si, counter) is if tt = empty then counter
					elsif currentState(hd(dom(tt)), tt, t) = (si, si) then
					      tramsAtStop(tt\{hd(dom(tt))}, t, si, counter+1)
					else
					      tramsAtStop(tt\{hd(dom(tt))}, t, si, counter)
					end,

     capacityAtConnection: TimeTable >< Net -> Bool
     capacityAtConnection(tt, n) is (all c : Connection :-
						c isin connections(n) => 
						~(exists t: Time :- t isin {0..60} /\
						capacity(id1(c), id2(c), n) <
						tramsInDirection(tt,
						t, id1(c), id2(c)) +
						tramsInDirection(tt,
						t, id2(c), id1(c)))),
					      

     overlappingDirection: TimeTable >< Net -> Bool
     overlappingDirection(tt, n) is 
				~(all c : Connection :- c isin connections(n) =>
						~(exists t : Time :- t
						isin {0..60} /\
						(tramsInDirection(tt, t, id1(c), id2(c)) > 0 /\
						tramsInDirection(tt,
						t, id2(c), id1(c)) >
						0))),

     tramsInDirection: TimeTable >< Time >< StopId >< StopId -> Nat
     tramsInDirection(tt, t, s1, s2) is recTramsInDirection(tt, t, s1, s2, 0),

     recTramsInDirection: TimeTable >< Time >< StopId >< StopId >< Nat -> Nat
     recTramsInDirection(tt, t, s1, s2, counter) is if tt = empty then
						       counter
						    elsif currentState(hd(dom(tt)), tt, t) = (s1, s2) then
							recTramsInDirection(tt \ {hd(dom(tt))}, t, s1, s2, counter+1)
						    else
							recTramsInDirection(tt \ {hd(dom(tt))}, t, s1, s2, counter)
						    end,
     
     noSkipStop: TimeTable >< Net -> Bool
     noSkipStop(tt, n) is (all p : Plan :- p isin rng(tt) =>
					if p = emptyPlan then true
					else
						recStopSkip(si(hd(p)), tl(p), n)
					end),
     

     recStopSkip: StopId >< Plan >< Net -> Bool
     recStopSkip(s1, p, n) is 
				 if p = emptyPlan then 
				    true
				 elsif ~(areDirectlyConnected(s1,
				 si(hd(p)), n)) then
				    false
				 else
				    recStopSkip(si(hd(p)), tl(p), n)
				 end,
			       
     correctDrivingTime: TimeTable >< Net -> Bool
     correctDrivingTime(tt, n) is (all p : Plan :- p isin rng(tt) =>
				     (recCorrectDrivingTime(si(hd(p)), dt(hd(p)), tl(p), n))),
     
     recCorrectDrivingTime: StopId >< Time >< Plan >< Net -> Bool
     recCorrectDrivingTime(s1, t, p, n) is
					if p = emptyPlan then
					   true
				        elsif at(hd(p)) - t < minDrivingTime(s1, si(hd(p)), n) then
					   false
				        else
					   recCorrectDrivingTime(si(hd(p)), dt(hd(p)), tl(p), n)
				        end,   

     isWellformed : TimeTable >< Net -> Bool
     isWellformed(tt, n) is 
		      noEntryInPlan(tt, n) /\
		      correctTimingAtStop(tt, n) /\ 
		      capacityAtStop(tt, n) /\
		      capacityAtConnection(tt, n) /\ 
		      ~overlappingDirection(tt, n) /\
		      noSkipStop(tt, n) /\ 
		      correctDrivingTime(tt, n)		 
     
end  
