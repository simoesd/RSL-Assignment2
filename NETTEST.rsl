NET
scheme NETTEST =
extend NET with 
class
  value 
    s1 : Stop = mk_Stop("a", 1, 1),
    s2 : Stop = mk_Stop("b", 1, 1),   
    s3 : Stop = mk_Stop("c", 1, 1),   
    s3_inv_same_s1 : Stop = mk_Stop("a", 2, 1),


    c1 : Connection = mk_Connection(sId(s1), sId(s2), 2, 3),
    c2 : Connection = mk_Connection(sId(s2), sId(s1), 3, 3),
    c3 : Connection = mk_Connection(sId(s1), sId(s3), 2, 2),
    c4 : Connection = mk_Connection(sId(s2), sId(s3), 2, 2),

    n_no_connections : Net = mk_Net({s1,s2},{}),
    n1 : Net = mk_Net({s1,s2},{c1}),
    n2 : Net = mk_Net({s1, s2, s3},{c1,c3}),

    n_connected_both_ways : Net = mk_Net({s1,s2},{c1, c2}),

    n_valid_connected : Net = mk_Net({s1, s2, s3},{c1, c4}),

    n_invalid_stop : Net = mk_Net({s1, s2},{c1, c4})

  test_case

    -- insertStop
    -- adding if stopId is "" or capacitiy is 0? (not sure)
    [t_insert_new_stop_valid] 
    insertStop("b", 1, 1, mk_Net({s1}, {})) = mk_Net({s1, s2}, {}),

    [t_insert_stop_empty_net] 
    insertStop("a", 1, 1, mk_Net({}, {})) = mk_Net({s1}, {}),

    [t_insert_stop_with_same_name] 
    insertStop("a", 1, 2, mk_Net({s1}, {})) = mk_Net({s1}, {}),

    -- addConnection
    -- adding if capacitiy is 0? (not sure)
    
    [t_valid_add_connection] 
    addConnection(sId(s1),sId(s2), 2, 3, n_no_connections) = n1,

    [t_add_nonexisted_stopId_to_connection] 
    addConnection("a", "b", 3, 3, mk_Net({s1}, {})) = mk_Net({s1}, {}),

    [t_add_same_stopId_connection] 
    addConnection("a", "a", 3, 3, mk_Net({s1}, {})) = mk_Net({s1}, {}),


    [t_add_flipped_stopIds] 
    addConnection("b", "a", 2, 3, n1) = n1,


    -- isIn
    -- isIn : StopId >< Net -> Bool
    [t_isin_valid] 
    isIn("a", mk_Net({s1}, {})) = true,

    [t_isin_valid_nonempty] 
    isIn("b", mk_Net({s1, s2}, {})) = true,

    [t_isin_empty] 
    isIn("a", mk_Net({}, {})) = false,

    [t_isin_nonempty_b_not_in_stops] 
    isIn("a", mk_Net({s2}, {})) = false,


    -- areDirectlyConnected : StopId >< StopId >< Net -> Bool
    [t_are_directly_connected_a_to_b]
    areDirectlyConnected("a", "b", n_valid_connected) = true,

    [t_are_directly_connected_b_a]
    areDirectlyConnected("b", "a", n_valid_connected) = true,

    [t_are_directly_connected_a_to_b_to_c]
    areDirectlyConnected("a", "c", n_valid_connected) = false,

    [t_are_directly_connected_a_to_nonexistent]
    areDirectlyConnected("a", "h", n_valid_connected) = false,
    
    [t_are_directly_connected_a_to_a]
    areDirectlyConnected("a", "a", n_valid_connected) = false,


    --capacity : StopId >< Net -~-> Capacity
    [valid_capacity_a]
    capacity("a", n_valid_connected) = 1,

    [valid_capacity_c]
    capacity("c", n_valid_connected) = 1,

    [capacity_non_existent]
    capacity("h", n_valid_connected) = 0,

    -- minWaitingTime : StopId >< Net -~-> WaitingTime
    [valid_minWaitingTime_a]
    minWaitingTime("a", n_valid_connected) = 1,

    [valid_minWaitingTime_c]
    minWaitingTime("c", n_valid_connected) = 1,

    [minWaitingTime_non_existent]
    minWaitingTime("h", n_valid_connected) = 0,


    -- isInConn : StopId >< StopId >< Net -> Bool
    [t_isInConn_valid]
    isInConn("a", "b", n_valid_connected) = true,

    [t_isInConn_valid_reverse]
    isInConn("b", "a", n_valid_connected) = true,

    [t_isInConn_invalid_a_non_existing]
    isInConn("a", "h", n_valid_connected) = false,

    [t_isInConn_a_a]
    isInConn("a", "a", n_valid_connected) = false,


    -- capacity : StopId >< StopId >< Net -~-> Capacity
    [t_valid_capacity_a_b]
    capacity("a", "b", n_valid_connected) = 2,

    [t_valid_capacity_b_a]
    capacity("b", "a", n_valid_connected) = 2,

    [t_valid_capacity_b_c]
    capacity("b", "c", n_valid_connected) = 2,

    [t_capacity_a_non_existent]
    capacity("a", "h", n_valid_connected) = 0,

    [t_capacity_a_a]
    capacity("a", "a", n_valid_connected) = 0,


    -- capacity : StopId >< StopId >< Net -~-> Capacity
    [t_valid_minDrivingTime_a_b]
    minDrivingTime("a", "b", n_valid_connected) = 3,

    [t_valid_minDrivingTime_b_a]
    minDrivingTime("b", "a", n_valid_connected) = 3,

    [t_valid_minDrivingTime_b_c]
    minDrivingTime("b", "c", n_valid_connected) = 2,

    [t_minDrivingTime_a_non_existent]
    minDrivingTime("a", "h", n_valid_connected) = 0,

    [t_minDrivingTime_a_a]
    capacity("a", "a", n_valid_connected) = 0,


    -- connectedBothWays : Stop >< Stop >< Connection-set -> Bool

    [t_connected_both_ways1]
    connectedBothWays(s1, s2, connections(n_connected_both_ways)) = true,

    [t_connected_both_ways2]
    connectedBothWays(s1, s2, connections(n2)) = false,


    [t_only_valid_stops1]
    onlyValidStops(n_valid_connected) = true, 

    [t_only_valid_stops2]
    onlyValidStops(n_invalid_stop) = false, 


    -- isWellformed : Net -> Bool
    [t_is_wellformed_valid]
    isWellformed(n2) = true,

    [t_is_wellformed_connected_both_ways]
    isWellformed(n_connected_both_ways) = false




   end
